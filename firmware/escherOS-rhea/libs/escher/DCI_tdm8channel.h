/**********************************************************************
*
* FileName:        i2sDrv.h
* Dependencies:    Other (.h) files if applicable, see below
* Processor:       dsPIC33Fxxxx//PIC24Hxxxx
* Compiler:        MPLAB C30 v3.00 or higher
*
* Copyright 2012 winfried ritsch
*
* derived from DCII2S example CE113 (microchip)
* Veena K.          03/23/06
*
* REVISION HISTORY:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Author            Date      Comments on this revision
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Veena K 			03/27/06  First release of source file
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
* ADDITIONAL NOTES: see C-File header
*
* Test TDM 8 channel on dspic33FJ256GP710 + Explorer 16
*
* DCI module for TDM operation to interface 8 channel of 32Bit
* for multichannel DAC/ADC eg. CS4385 Timing Diagram in Fig 1 below:
       __                                                                  _
      |  |                                                                |
COFS: |  |________________________________________________________________|
       _   _   _   _   _   _   _   _   _   _       _   _   _   _   _   _   _
CSCK:_| |_| |_| |_| |_| |_| |_| |_| |_| |_| | ... | |_| |_| |_| |_| |_| |_|
          |<-------- 1st Channel Data---->|<- ... 8th Channel Data------->|
          |<---------32 bits------------->|<- ... ---32 bits------------->|
          |<---TXBUF0---->|<----TXBUF0--->|<- ...    ---->|<----TXBUF0 -->|
          |<---RXBUF0---->|<----RXBUF0--->|<- ...    ---->|<----RXBUF0 -->|
          |<-TimeSlot 0 ->|<-TimeSlot 1 ->|<- --- Slot14->|<-TimeSlot 15->|
          |<--------------------1/Fs = ???? microseconds----------------->|
       _   _   _   _   _   _   _   _   _   _       _   _   _   _   _   _   _
MCLK:_| |_| |_| |_| |_| |_| |_| |_| |_| |_| | ... | |_| |_| |_| |_| |_| |_|

 * To generate the needed Masterclock we have to use 32 Bit per channel
 * so 256 Bits per Frame is clocked, so we can use the dataclock CSCK
 * as masterclock MCLK as needed by CS chips
 * (Note: not very flexible but should work, Otherwise the MCLK and SCLK
 * has to be generated by the ADC e.g. CS5368 as Master, but then
 * dsPIC or PIC32 cannot be used as Master.
 *
 **********************************************************************/

#ifndef __DCI_TDM_H__
#define __DCI_TDM_H__

// -------- Hardware Defs should go into HW_profile of main app later --------
// Port Remapping
#define  PPSUnLock()          __builtin_write_OSCCONL(OSCCON & ~(1<<6))
#define  PPSLock()            __builtin_write_OSCCONL(OSCCON | (1<<6))

#define PIN_CSDI        124      // RPI124/RG12
#define PIN_CSDO        _RP125R  // RP125/RG13
#define PIN_COFS        _RP127R  // RP127/RG15
#define PIN_CSCK        _RP126R  // RP126/RG14

#define OUT_FN_PPS_CSDO     0b001011 // =0x000B=11 RPn tied to DCI Serial Data Output*/
#define OUT_FN_PPS_CSCKOUT  0b001100 // =0x000C=12 RPn tied to DCI Serial Clock Output*/
#define OUT_FN_PPS_COFSOUT  0b001101 // =0x000D=13 RPn tied to DCI Frame Sync Output*/

#define IN_FN_PPS_CSDI      RPINR24bits.CSDIR /* Assign DCI Serial Data Input (CSDIN) to the corresponding RPn pin*/
#define IN_FN_PPS_CSCK      RPINR24bits.CSCKR /* Assign DCI Serial Clock Input (CSCKIN) to the corresponding RPn pin*/
#define IN_FN_PPS_COFS      RPINR25bits.COFSR /* Assign DCI Frame Sync Input (COFSIN) to the corresponding RPn pin*/


// DCI SAMPLE is 32 bit signed long with 2 TimeSlots as unsigned word each SAMPLE
#define MAX_SAMPLE_VALUE (8388607l*256l) // for 24Bit signed, 32bit allinged
#define MIN_SAMPLE_VALUE -(8388607l*256l) // for 24Bit signed, 32bit allinged

typedef union {
    signed long sample;
    unsigned short word[2];
    unsigned char byte[4];
} DCI_SAMPLE;

// we need now a big buffer for data
// GP has 2kBytes DMA = 1024 words, 512 for RX and 512 for TX
// for test use biggest possible which is 2^10=1024
// use ping pong mode so double real size

#define BUFFER_SAMPLES_HALF 32   // 2 slots 16Bit for each sample
#define BUFFER_SAMPLES (2*BUFFER_SAMPLES_HALF)   // 64 words for each channel
#define BUFFER_SIZE_HALF (BUFFER_SAMPLES_HALF*CHANNELS) // in words, for all channel
#define BUFFER_SIZE (2*BUFFER_SIZE_HALF) // words for all channel


// External Functions
extern void dciInit(void);
extern void dciInitBuffer(void); // use it before Init !

// Interrupt Service routines calls external functions
extern void ProcessDciRxSamples(DCI_SAMPLE *DciRxBuffer);
extern void ProcessDciTxSamples(DCI_SAMPLE *DciTxBuffer);

extern unsigned int dma_counter;
#endif
